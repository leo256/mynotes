—————————————————— Spring框架 ————————————————
概念：轻量级的企业开发框架
功能：使用基本的JavaBean代替EJB，并提供了更多的企业应用功能
          Enterprise Java Beans(EJB)称为企业 java Bean
两大核心功能：IOC容器思想 控制反转 遵循DIP原则(高层不依赖底层，依赖抽象) 依赖注入
                      AOP代理
核心容器工厂：BeanFactory基础、ApplicationContext扩展
有三种方式可以获取Bean对象：id、name、class

————————————————— 作用域 —————————————————
概念：scope属性是指bean在容器中的作用域，默认是单利的值是(singleton)，不是单利原型值是(prototype)

作用：
（1）设置单利 也就是说容器中只有一个bean实例，所以返回的时候都是同一个对象
（2）设置不是单利原型，容器每次返回的都是不同对象实例

注：在web环境中，scope还有request和session等作用域的设置，表示bean在请求范围还是会话范围内有效
————————————————— 自定义工厂—————————————————
1.自定义工厂纳入容器中管理：
	      配置类 需要配置 （factory-bean、factory-method）
                      factory-bean：指定引用自定义工厂的id，上面配置的工厂bean的id
	      factory-method：指定自定义工厂类中的bulid方法
       
2.自定义工厂创建静态方法：
                      配置类 (class这里是写工厂的完整类名，factory-method)

3.自定义工厂实现FactoryBean 接口：
                      Spring容器会调用FactoryBean的getObject方法，将返回对象自动纳入IOC容器中

————————————————— Bean生命周期 ————————————————
-------------------------生命周期执行循序-------------------------------
        1.构造方法
        2.InitializingBean接口的afterPropertiesSet初始化方法
        3.自定义的init初始化方法 init-method
        4.DisposableBean接口的destroy销毁方法
        5.自定义销毁方法 destroy-method

------------------加后置处理器BeanPostProcessor(BPP)----------------
实现两个方法：
     在初始化前执行：postProcessBeforeInitialization
     在初始化后执行：postProcessAfterInitialization

       1.构造方法
        2.后置处理器postProcessBeforeInitialization的方法
        3.InitializingBean接口的afterPropertiesSet方法
        4.自定义初始化方法 init-method
        5.后处理器postProcessAfterInitialization方法
        6.DisposableBean接口的destroy方法
        7.自定义销毁方法 destroy-method

—————————————————— 依赖注入—————————————————
DI依赖注入概念：动态的向高层组件提供它所需要的其他底层组件
IOC控制反转概念：一层含义是控制权的转移：由传统的在程序中控制依赖转移到由容器来控制；第二层是依赖注入：将相互依赖的对象分离，在spring配置文件中描述他们的依赖关系。由容器帮我们查找以及通过set方法注入依赖的对象，高层组件对象只是被动的接收依赖底层组件对象
IOC容器：1.它是工厂负责管理bean   2.负责两个bean之间的依赖关系


比如对象A需要操作数据库，以前我们要在A中获得一个Connection对象，有了 spring我们就只需要告诉spring，A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统运行时，spring会在适当的时候制造一个Connection，然后像打针一样，注射到A当中，这样就完成了对各个对象之间关系的控制。A需要依赖 Connection才能正常运行，而这个Connection是由spring注入到A中的，依赖注入的名字就这么来的。

————————————————依赖注入的二种方法—————————————————
（1）通过set方法
（2）通过构造函数方法
（2.2）通过下标方法
———————————————— FactoryBean 接口—————————————————
Spring容器会调用FactoryBean的getObject方法，将返回对象自动纳入IOC容器中
实现三个方法：
（1）getObject()  返回的是具体某个实现类的Bean,放在容器中
（2）getObjectType()  返回的是Bean的类型 接口的.class对象  如果是原型，就重新new一个对象
（3）isSingleton()  作用域的控制，是否是单例的

整合目的：解耦，动态创建代理


_______________________xml与注解混合配置_______________
1,@Component("controller")  -->  @Controller("controller")   使用Component注解标识类，表示为容器受管的Beanvalue属性用于指定Bean的id，如果不指定，默认就是类名将首字母变为小写后作为id.
2,@Scope("prototype")   @Scope注解用于指定Bean的作用域，作用和xml中的一致
3,@Repository("userDao")  可以使用@Repository注解来标识dao层
4,@Service("userService")    可以使用@Service注解来标识业务层
5,@Autowired  注解用于完成注入配置,可以标识在set方法上、构造方法上、字段上 注意：当注入的实现类只有一个的时候，Spring会自动找到它并直接注入进来。如果有多个实现类的时候，先根据变量名称作为id从容器中查找,如果匹配到,则直接注入,匹配不到则抛出有多个实现类的的异常,此时就必须结合       @Qualifier注解一起使用，这个注解的作用是指定要注入哪一个实现类
6, @Resource(name="stuService")   也可以使用@Resource注解来注入它javax包下提供的注解Spring可以支持此注解,name指定要注入Bean的id但是这个注解只能标注在字段和set方法上,不能标注在构造方法上
7,@PostConstruct注解标识自定义初始化方法
8,@PreDestroy注解标识自定义的销毁方法
9,@Primary  @Primary注解标识在类上，表示优先注入的Bean
10,@Bean: 用于把当前的返回值作为bean对存入spring的IOC容器中
       属性：name:指定bean的id,如果不指定，为当前方法的名称；
       细节：当我们使用注解配置方法时，如果方法有参数，spring框架回去容器中查找有没有可用的bean对象，查找的方法和Autowired注解的作用一样的，自动按照类型注入
11,@Import: 导入其他类
属性：value:用于指定其他配置类的字节码 
当我们使用Import的注解后，有Import注解的类就是父配置类，而导入的为子配置类；
12,@propertySource: 用于指定properties文件位置
属性 classpath：用于指定文件名名称和路径























